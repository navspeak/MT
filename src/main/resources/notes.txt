![CPU Cache](src/main/resources/CPUCache.PNG)
==
The Java Memory Model defines a set of guarantees which, when applied to a program,
ensure memory interacts between threads occur in a specified deterministic fashion

The Java memory model specifies how and when different threads can see values written to shared variables by other threads,
and how to synchronize access to shared variables when necessary.
==
In C, Volatile means do not cache and no guarantee under MT conds
Initially Java also meant any thread will see latest value.
Implemented by no caching or flushing first - mechanism was specified. So technically saying variable is not cacheable is wrong technically.

Ony shared variables can be volatile.
Finals can't be volatile. Arrays and obj marked volatile means the ref is volatile not the content

Volatile indicates value may be shared between threads. Prevents optimizations based on program order

Volatile is a mean to synch data b/w threads. When reading or writing volatile data, compiler installs menory fences
===
After volatile read the state we are guaranteed to see is the state of the world at the time of volatile write or later.
If the object is further updated, we may see updates to some but not all.
This could lead to object in inconsistent state and thus invariant broken.
Invariants are relationship between parts of the object which must remain consistent.
We can publish immutable objects as one solution.
====
String Intern() is a native call. Checks in String Pool (which is part of JVM heap from Java 7 onwards and can be GC'd
vs PermGen before)
https://www.baeldung.com/java-string-pool

How can final fields appear to change their values?
-- A String can be implemented as an object with three fields
  a character array, an offset into that array, and a length.
The rationale for implementing String this way, instead of having only the character array, is that it lets multiple
String and StringBuffer objects share the same character array and avoid additional object allocation and copying.
So, for example, the method String.substring() can be implemented by creating a new string which shares the same
character array with the original String and merely differs in the length and offset fields.
For a String, these fields are all final fields.

String s1 = "/usr/tmp";
String s2 = s1.substring(4);
The string s2 will have an offset of 4 and a length of 4. But, under the old model, it was possible for another thread to see the offset as having the default value of 0, and then later see the correct value of 4, it will appear as if the string "/usr" changes to "/tmp".

The original Java Memory Model allowed this behavior; several JVMs have exhibited this behavior. The new Java Memory Model makes this illegal.
====
Getting Deadlock with Producer / Consumer model:
https://stackoverflow.com/questions/37026/java-notify-vs-notifyall-all-over-again
STEP 1:
- P1 puts 1 char into the buffer

STEP 2:
- P2 attempts put - checks wait loop - already a char - waits

STEP 3:
- P3 attempts put - checks wait loop - already a char - waits

STEP 4:
- C1 attempts to get 1 char
- C2 attempts to get 1 char - blocks on entry to the get method
- C3 attempts to get 1 char - blocks on entry to the get method

STEP 5:
- C1 is executing the get method - gets the char, calls notify, exits method
- The notify wakes up P2
- BUT, C2 enters method before P2 can (P2 must reacquire the lock), so P2 blocks on entry to the put method
- C2 checks wait loop, no more chars in buffer, so waits
- C3 enters method after C2, but before P2, checks wait loop, no more chars in buffer, so waits

STEP 6:
- NOW: there is P3, C2, and C3 waiting!
- Finally P2 acquires the lock, puts a char in the buffer, calls notify, exits method

STEP 7:
- P2's notification wakes P3 (remember any thread can be woken)
- P3 checks the wait loop condition, there is already a char in the buffer, so waits.
- NO MORE THREADS TO CALL NOTIFY and THREE THREADS PERMANENTLY SUSPENDED!

SOLUTION: Replace notify with notifyAll in the producer/consumer code (above).
===
http://tutorials.jenkov.com/java-concurrency/thread-signaling.html#spurious-wakeups
Implement Countdown latch using wait/notify - https://www.javamex.com/tutorials/synchronization_wait_notify_4.shtml